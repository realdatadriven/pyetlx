name: Build Python Wheels

on:
    workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-20.04] # ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.8] #, 3.9, 3.10, 3.11]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout source code
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: "1.23" # Specify the Go version
    
    # Conditional installation for Ubuntu
    - name: Install dependencies (Ubuntu)
      if: ${{ matrix.os == 'ubuntu-20.04' }}
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential gcc g++ unixodbc unixodbc-dev python3-dev python${{ matrix.python-version }}-dev

    - name: Debug Python headers
      run: |
        python${{ matrix.python-version }}-config --includes
        python${{ matrix.python-version }} --version
        ls -lsh $LD_LIBRARY_PATH

    # Conditional installation for macOS
    - name: Install dependencies (macOS)
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        brew update
        brew install gcc unixodbc python@${{ matrix.python-version }}
    
    # Conditional installation for Windows
    - name: Install dependencies (Windows)
      if: ${{ matrix.os == 'windows-latest' }}
      run: |
        choco install mingw -y
        Write-Host "MinGW installed for cross-compilation"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools packaging wheel twine pybindgen
        go install golang.org/x/tools/cmd/goimports@latest
        go install github.com/go-python/gopy@latest
    
    - name: Generate Python Bindings
      run: |
        gopy gen -output=src github.com/realdatadriven/etlx
      
    - name: Fix Generated Code
      run: |
        python3 fix.py

    - name: Build Python wheel
      run: |
        cd ./src
        make build
        cd ..
        python3 -m build

    - name: See dist
      run: |
        ls -lsh ./dist          

    - name: Upload artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: python-wheel-${{ matrix.os }}-py${{ matrix.python-version }}
        path: dist/*.whl
    
    
