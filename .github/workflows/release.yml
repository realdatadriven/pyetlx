name: Build Python Wheels

on:
    workflow_dispatch:
    push:
        tags:
        - 'v*'
      
permissions:
  id-token: write
jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest] #ubuntu-22.04, macos-latest, windows-latest]
        python-version: [3.11] #, 3.10, 3.11, 3.12]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout source code
      uses: actions/checkout@v3

    - name: Set Python build version
      run: |
        sed -i "s/version = '.*'/version = '${{ github.ref_name }}'/g" setup.py

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: "1.24" # Specify the Go version
    
    # Conditional installation for Ubuntu
    - name: Install dependencies (Ubuntu)
      if: ${{ matrix.os == 'ubuntu-22.04' }}
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential gcc g++ unixodbc unixodbc-dev python3-dev python${{ matrix.python-version }}-dev

    # Conditional installation for macOS
    - name: Install dependencies (macOS)
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        brew update
        brew install unixodbc python@${{ matrix.python-version }}
        brew --prefix unixodbc
        ODBC_PREFIX=$(brew --prefix unixodbc)
        echo "CGO_ENABLED=1" >> $GITHUB_ENV
        echo "CGO_CFLAGS=-I$ODBC_PREFIX/include" >> $GITHUB_ENV
        echo "CGO_LDFLAGS=-L$ODBC_PREFIX/lib -lodbc" >> $GITHUB_ENV
    
    # Conditional installation for Windows
    - name: Install dependencies (Windows)
      if: ${{ matrix.os == 'windows-latest' }}
      run: |
        choco install mingw -y
        Write-Host "MinGW installed for cross-compilation"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools packaging wheel twine pybindgen build
        go install golang.org/x/tools/cmd/goimports@latest
        go install github.com/go-python/gopy@latest

    - name: Update pyproject.toml with platform info
      if: ${{ matrix.os == '---windows-latest' }}
      run: |
          PLATFORM=$(uname -s | tr '[:upper:]' '[:lower:]')
          ARCH=$(uname -m)
          sed -i "s/version = \"0.1.1\"/version = \"0.1.1-${PLATFORM}-${ARCH}\"/g" pyproject.toml
      shell: bash
    
    - name: Update pyproject.toml with platform info (Windows)
      if: ${{ matrix.os == '--windows-latest' }}
      run: |
        $platform = $Env:OS.ToLower()
        $arch = $Env:PROCESSOR_ARCHITECTURE.ToLower()
        (Get-Content pyproject.toml) -replace 'version = "0.1.1"', "version = `"0.1.1-$platform-$arch`"" | Set-Content pyproject.toml
      shell: pwsh
    
    - name: Generate Python Bindings
      run: |
        gopy gen -output=src github.com/realdatadriven/etlx
      
    - name: Fix Generated Code
      run: |
        python3 fix.py

    - name: Set short Python version
      if: ${{ matrix.os != 'windows-latest'}}
      run: |
        SHORT_PYTHON_VERSION=${{ matrix.python-version//./}}
        echo "SHORT_PYTHON_VERSION=$SHORT_PYTHON_VERSION" >> $GITHUB_ENV
      shell: bash
      

    - name: Build Python wheel (Linux)
      if: ${{ matrix.os == 'ubuntu-22.04' }}
      run: |
        cd ./src
        make build
        cd ..
        python3 setup.py bdist_wheel --plat-name cp11-any-manylinux-x86_64 
    
    - name: Build Python wheel (Macos)
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        cd ./src
        make build
        cd ..
        python3 setup.py bdist_wheel --plat-name cp${{ matrix.python-version }}-any-macosx_x86_64 
    
    - name: Set short Python version (Windows)
      if: ${{ matrix.os == 'windows-latest'}}
      run: |
        $shortVer = "${{ matrix.python-version }}".Replace(".", "")
        echo "SHORT_PYTHON_VERSION=$shortVer" >> $env:GITHUB_ENV
      shell: pwsh
    
    - name: Build Python wheel 
      if: ${{ matrix.os == 'windows-latest'}}
      run: |
        cd ./src
        make build
        cd ..
        python3 setup.py bdist_wheel --plat-name cp${{ env.SHORT_PYTHON_VERSION }}-any-win32
    
    - name: Build Python wheel windows
      if: ${{ matrix.os == 'windows-latest--'}}
      run: |
        cd ./src
        make build
        cd ..
        python3 -m build
    #python 3 -m build --wheel --no-isolation

    - name: See generated files (Windows)
      if: ${{ matrix.os == 'windows-latest'}}
      run: |
        dir ./src
        dir ./dist
    
    - name: See dist (Ubuntu & MacOS)
      if: ${{ matrix.os != 'windows-latest'}}
      run: |
        ls -lsh ./src
        ls -lsh ./dist

    - name: Upload artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: python-wheels
        path: dist/*.whl
    
  release:
    permissions: write-all
    runs-on: ubuntu-22.04
    needs: [build]
    steps:
      - name: Download Python Wheels
        uses: actions/download-artifact@v4
        with:
          name: python-wheels
          path: dist
      - name: See downloads
        run: |
            ls -lsh ./dist
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: dist/
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
