# python build stubs for package etlx
# File is generated by gopy. Do not edit.
# gopy gen github.com/realdatadriven/etlx

from pybindgen import retval, param, Function, Module
import sys

class CheckedFunction(Function):
    def __init__(self, *a, **kw):
        super(CheckedFunction, self).__init__(*a, **kw)
        self._failure_expression = kw.get('failure_expression', '')
        self._failure_cleanup = kw.get('failure_cleanup', '')

    def set_failure_expression(self, expr):
        self._failure_expression = expr

    def set_failure_cleanup(self, expr):
        self._failure_cleanup = expr

    def generate_call(self):
        super(CheckedFunction, self).generate_call()
        check = "PyErr_Occurred()"
        if self._failure_expression:
            check = "{} && {}".format(self._failure_expression, check)
        failure_cleanup = self._failure_cleanup or None
        self.before_call.write_error_check(check, failure_cleanup)

def add_checked_function(mod, name, retval, params, failure_expression='', *a, **kw):
    fn = CheckedFunction(name, retval, params, *a, **kw)
    fn.set_failure_expression(failure_expression)
    mod._add_function_obj(fn)
    return fn

def add_checked_string_function(mod, name, retval, params, failure_expression='', *a, **kw):
    fn = CheckedFunction(name, retval, params, *a, **kw)
    fn.set_failure_cleanup('if (retval != NULL) free(retval);')
    fn.after_call.add_cleanup_code('free(retval);')
    fn.set_failure_expression(failure_expression)
    mod._add_function_obj(fn)
    return fn

mod = Module('_etlx')
mod.add_include('"etlx_go.h"')
mod.add_function('GoPyInit', None, [])
mod.add_function('DecRef', None, [param('int64_t', 'handle')])
mod.add_function('IncRef', None, [param('int64_t', 'handle')])
mod.add_function('NumHandles', retval('int'), [])
mod.add_function('Slice_bool_CTor', retval('int64_t'), [])
mod.add_function('Slice_bool_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_bool_elem', retval('bool'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_bool_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_bool_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('bool', 'value')])
mod.add_function('Slice_bool_append', None, [param('int64_t', 'handle'), param('bool', 'value')])
mod.add_function('Slice_byte_CTor', retval('int64_t'), [])
mod.add_function('Slice_byte_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_byte_elem', retval('uint8_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_byte_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_byte_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('uint8_t', 'value')])
mod.add_function('Slice_byte_append', None, [param('int64_t', 'handle'), param('uint8_t', 'value')])
mod.add_function('Slice_byte_from_bytes', retval('int64_t'), [param('PyObject*', 'o', transfer_ownership=False)])
mod.add_function('Slice_byte_to_bytes', retval('PyObject*', caller_owns_return=True), [param('int64_t', 'handle')])
mod.add_function('Slice_error_CTor', retval('int64_t'), [])
mod.add_function('Slice_error_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_error_elem', retval('char*'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_error_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_error_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('char*', 'value')])
mod.add_function('Slice_error_append', None, [param('int64_t', 'handle'), param('char*', 'value')])
mod.add_function('Slice_float32_CTor', retval('int64_t'), [])
mod.add_function('Slice_float32_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_float32_elem', retval('float'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_float32_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_float32_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('float', 'value')])
mod.add_function('Slice_float32_append', None, [param('int64_t', 'handle'), param('float', 'value')])
mod.add_function('Slice_float64_CTor', retval('int64_t'), [])
mod.add_function('Slice_float64_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_float64_elem', retval('double'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_float64_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_float64_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('double', 'value')])
mod.add_function('Slice_float64_append', None, [param('int64_t', 'handle'), param('double', 'value')])
mod.add_function('Slice_int_CTor', retval('int64_t'), [])
mod.add_function('Slice_int_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_int_elem', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_int_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_int_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('int64_t', 'value')])
mod.add_function('Slice_int_append', None, [param('int64_t', 'handle'), param('int64_t', 'value')])
mod.add_function('Slice_int16_CTor', retval('int64_t'), [])
mod.add_function('Slice_int16_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_int16_elem', retval('int16_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_int16_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_int16_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('int16_t', 'value')])
mod.add_function('Slice_int16_append', None, [param('int64_t', 'handle'), param('int16_t', 'value')])
mod.add_function('Slice_int32_CTor', retval('int64_t'), [])
mod.add_function('Slice_int32_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_int32_elem', retval('int32_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_int32_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_int32_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('int32_t', 'value')])
mod.add_function('Slice_int32_append', None, [param('int64_t', 'handle'), param('int32_t', 'value')])
mod.add_function('Slice_int64_CTor', retval('int64_t'), [])
mod.add_function('Slice_int64_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_int64_elem', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_int64_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_int64_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('int64_t', 'value')])
mod.add_function('Slice_int64_append', None, [param('int64_t', 'handle'), param('int64_t', 'value')])
mod.add_function('Slice_int8_CTor', retval('int64_t'), [])
mod.add_function('Slice_int8_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_int8_elem', retval('int8_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_int8_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_int8_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('int8_t', 'value')])
mod.add_function('Slice_int8_append', None, [param('int64_t', 'handle'), param('int8_t', 'value')])
mod.add_function('Slice_rune_CTor', retval('int64_t'), [])
mod.add_function('Slice_rune_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_rune_elem', retval('int32_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_rune_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_rune_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('int32_t', 'value')])
mod.add_function('Slice_rune_append', None, [param('int64_t', 'handle'), param('int32_t', 'value')])
mod.add_function('Slice_string_CTor', retval('int64_t'), [])
mod.add_function('Slice_string_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_string_elem', retval('char*'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_string_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_string_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('char*', 'value')])
mod.add_function('Slice_string_append', None, [param('int64_t', 'handle'), param('char*', 'value')])
mod.add_function('Slice_uint_CTor', retval('int64_t'), [])
mod.add_function('Slice_uint_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_uint_elem', retval('uint64_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_uint_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_uint_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('uint64_t', 'value')])
mod.add_function('Slice_uint_append', None, [param('int64_t', 'handle'), param('uint64_t', 'value')])
mod.add_function('Slice_uint16_CTor', retval('int64_t'), [])
mod.add_function('Slice_uint16_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_uint16_elem', retval('uint16_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_uint16_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_uint16_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('uint16_t', 'value')])
mod.add_function('Slice_uint16_append', None, [param('int64_t', 'handle'), param('uint16_t', 'value')])
mod.add_function('Slice_uint32_CTor', retval('int64_t'), [])
mod.add_function('Slice_uint32_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_uint32_elem', retval('uint32_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_uint32_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_uint32_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('uint32_t', 'value')])
mod.add_function('Slice_uint32_append', None, [param('int64_t', 'handle'), param('uint32_t', 'value')])
mod.add_function('Slice_uint64_CTor', retval('int64_t'), [])
mod.add_function('Slice_uint64_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_uint64_elem', retval('uint64_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_uint64_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_uint64_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('uint64_t', 'value')])
mod.add_function('Slice_uint64_append', None, [param('int64_t', 'handle'), param('uint64_t', 'value')])
mod.add_function('Slice_uint8_CTor', retval('int64_t'), [])
mod.add_function('Slice_uint8_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_uint8_elem', retval('uint8_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_uint8_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_uint8_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('uint8_t', 'value')])
mod.add_function('Slice_uint8_append', None, [param('int64_t', 'handle'), param('uint8_t', 'value')])
mod.add_function('Slice_interface__CTor', retval('int64_t'), [])
mod.add_function('Slice_interface__len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_interface__elem', retval('char*'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_interface__subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_interface__set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('char*', 'value')])
mod.add_function('Slice_interface__append', None, [param('int64_t', 'handle'), param('char*', 'value')])
mod.add_function('Slice_Map_string_any_CTor', retval('int64_t'), [])
mod.add_function('Slice_Map_string_any_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_Map_string_any_elem', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_Map_string_any_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_Map_string_any_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('int64_t', 'value')])
mod.add_function('Slice_Map_string_any_append', None, [param('int64_t', 'handle'), param('int64_t', 'value')])
mod.add_function('Slice_time_Time_CTor', retval('int64_t'), [])
mod.add_function('Slice_time_Time_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_time_Time_elem', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_time_Time_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_time_Time_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('int64_t', 'value')])
mod.add_function('Slice_time_Time_append', None, [param('int64_t', 'handle'), param('int64_t', 'value')])
mod.add_function('Map_string_any_CTor', retval('int64_t'), [])
mod.add_function('Map_string_any_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Map_string_any_elem', retval('int64_t'), [param('int64_t', 'handle'), param('char*', '_ky')])
mod.add_function('Map_string_any_contains', retval('bool'), [param('int64_t', 'handle'), param('char*', '_ky')])
mod.add_function('Map_string_any_set', None, [param('int64_t', 'handle'), param('char*', 'key'), param('int64_t', 'value')])
mod.add_function('Map_string_any_delete', None, [param('int64_t', 'handle'), param('char*', '_ky')])
mod.add_function('Map_string_any_keys', retval('int64_t'), [param('int64_t', 'handle')])
mod.add_function('Map_string_interface__CTor', retval('int64_t'), [])
mod.add_function('Map_string_interface__len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Map_string_interface__elem', retval('char*'), [param('int64_t', 'handle'), param('char*', '_ky')])
mod.add_function('Map_string_interface__contains', retval('bool'), [param('int64_t', 'handle'), param('char*', '_ky')])
mod.add_function('Map_string_interface__set', None, [param('int64_t', 'handle'), param('char*', 'key'), param('char*', 'value')])
mod.add_function('Map_string_interface__delete', None, [param('int64_t', 'handle'), param('char*', '_ky')])
mod.add_function('Map_string_interface__keys', retval('int64_t'), [param('int64_t', 'handle')])
add_checked_function(mod, 'db_DBInterface_Close', retval('char*'), [param('int64_t', '_handle')])
add_checked_function(mod, 'db_DBInterface_ExecuteNamedQuery', retval('int64_t'), [param('int64_t', '_handle'), param('char*', 'query'), param('int64_t', 'data')])
add_checked_function(mod, 'db_DBInterface_ExecuteQuery', retval('int64_t'), [param('int64_t', '_handle'), param('char*', 'query'), param('int64_t', 'data')])
add_checked_function(mod, 'db_DBInterface_ExecuteQueryPGInsertWithLastInsertId', retval('int64_t'), [param('int64_t', '_handle'), param('char*', 'query'), param('int64_t', 'data')])
add_checked_function(mod, 'db_DBInterface_ExecuteQueryRowsAffected', retval('int64_t'), [param('int64_t', '_handle'), param('char*', 'query'), param('int64_t', 'data')])
add_checked_string_function(mod, 'db_DBInterface_GetDriverName', retval('char*'), [param('int64_t', '_handle')])
add_checked_function(mod, 'db_DBInterface_IsEmpty', retval('bool'), [param('int64_t', '_handle'), param('char*', 'value')])
add_checked_function(mod, 'db_DBInterface_Ping', retval('char*'), [param('int64_t', '_handle')])
add_checked_function(mod, 'db_DBInterface_Query2CSV', retval('bool'), [param('int64_t', '_handle'), param('char*', 'query'), param('char*', 'csv_path'), param('int64_t', 'params')])
mod.add_function('db_DB_CTor', retval('int64_t'), [])
add_checked_string_function(mod, 'db_DB_GetDriverName', retval('char*'), [param('int64_t', '_handle')])
add_checked_function(mod, 'db_DB_ExecuteQuery', retval('int64_t'), [param('int64_t', '_handle'), param('char*', 'query'), param('int64_t', 'data')])
add_checked_function(mod, 'db_DB_ExecuteQueryPGInsertWithLastInsertId', retval('int64_t'), [param('int64_t', '_handle'), param('char*', 'query'), param('int64_t', 'data')])
add_checked_function(mod, 'db_DB_ExecuteQueryRowsAffected', retval('int64_t'), [param('int64_t', '_handle'), param('char*', 'query'), param('int64_t', 'data')])
add_checked_function(mod, 'db_DB_ExecuteNamedQuery', retval('int64_t'), [param('int64_t', '_handle'), param('char*', 'query'), param('int64_t', 'data')])
add_checked_function(mod, 'db_DB_IsEmpty', retval('bool'), [param('int64_t', '_handle'), param('char*', 'value')])
add_checked_function(mod, 'db_DB_Query2CSV', retval('bool'), [param('int64_t', '_handle'), param('char*', 'query'), param('char*', 'csv_path'), param('int64_t', 'params')])
mod.add_function('db_DuckDB_CTor', retval('int64_t'), [])
add_checked_function(mod, 'db_DuckDB_ExecuteQuery', retval('int64_t'), [param('int64_t', '_handle'), param('char*', 'query'), param('int64_t', 'data')])
add_checked_function(mod, 'db_DuckDB_ExecuteQueryRowsAffected', retval('int64_t'), [param('int64_t', '_handle'), param('char*', 'query'), param('int64_t', 'data')])
add_checked_function(mod, 'db_DuckDB_ExecuteNamedQuery', retval('int64_t'), [param('int64_t', '_handle'), param('char*', 'query'), param('int64_t', 'data')])
add_checked_function(mod, 'db_DuckDB_ExecuteQueryPGInsertWithLastInsertId', retval('int64_t'), [param('int64_t', '_handle'), param('char*', 'query'), param('int64_t', 'data')])
add_checked_string_function(mod, 'db_DuckDB_GetDriverName', retval('char*'), [param('int64_t', '_handle')])
add_checked_function(mod, 'db_DuckDB_Query2CSV', retval('bool'), [param('int64_t', '_handle'), param('char*', 'query'), param('char*', 'csv_path'), param('int64_t', 'params')])
add_checked_function(mod, 'db_DuckDB_IsEmpty', retval('bool'), [param('int64_t', '_handle'), param('char*', 'value')])
mod.add_function('etlxlib_ETLX_CTor', retval('int64_t'), [])
mod.add_function('etlxlib_ETLX_Config_Get', retval('int64_t'), [param('int64_t', 'handle')])
mod.add_function('etlxlib_ETLX_Config_Set', None, [param('int64_t', 'handle'), param('int64_t', 'val')])
add_checked_function(mod, 'etlxlib_ETLX_ExecuteQueryWithRowsAffected', retval('int64_t'), [param('int64_t', '_handle'), param('int64_t', 'conn'), param('int64_t', 'sqlData'), param('int64_t', 'item'), param('char*', 'fname'), param('char*', 'step'), param('int64_t', 'dateRef')])
add_checked_function(mod, 'etlxlib_ETLX_RunDATA_QUALITY', retval('int64_t'), [param('int64_t', '_handle'), param('int64_t', 'dateRef'), param('int64_t', 'conf'), param('int64_t', 'extraConf'), param('int64_t', 'keys')])
add_checked_function(mod, 'etlxlib_ETLX_ConfigFromFile', retval('char*'), [param('int64_t', '_handle'), param('char*', 'filePath')])
add_checked_function(mod, 'etlxlib_ETLX_ConfigFromIpynbJSON', retval('char*'), [param('int64_t', '_handle'), param('char*', 'ipynbJSON')])
add_checked_function(mod, 'etlxlib_ETLX_ConfigFromMDText', retval('char*'), [param('int64_t', '_handle'), param('char*', 'mdText')])
add_checked_function(mod, 'etlxlib_ETLX_ParseMarkdownToConfig_', retval('char*'), [param('int64_t', '_handle'), param('int64_t', 'reader')])
add_checked_function(mod, 'etlxlib_ETLX_TracebackHeaders', retval('int64_t'), [param('int64_t', '_handle'), param('int64_t', 'node'), param('int64_t', 'source')])
add_checked_function(mod, 'etlxlib_ETLX_ParseMarkdownToConfig', retval('char*'), [param('int64_t', '_handle'), param('int64_t', 'reader')])
add_checked_function(mod, 'etlxlib_ETLX_PrintConfigAsJSON', None, [param('int64_t', '_handle'), param('int64_t', 'config'), param('bool', 'goRun')])
add_checked_function(mod, 'etlxlib_ETLX_Walk', None, [param('int64_t', '_handle'), param('int64_t', 'data'), param('char*', 'path'), param('PyObject*', 'fn', transfer_ownership=False), param('bool', 'goRun')])
add_checked_function(mod, 'etlxlib_ETLX_GetRefFromString', retval('int64_t'), [param('int64_t', '_handle'), param('char*', 'file')])
add_checked_string_function(mod, 'etlxlib_ETLX_ReplaceFileTablePlaceholder', retval('char*'), [param('int64_t', '_handle'), param('char*', 'key'), param('char*', 'sql'), param('char*', 'file_table')])
add_checked_string_function(mod, 'etlxlib_ETLX_GetGODateFormat', retval('char*'), [param('int64_t', '_handle'), param('char*', 'format')])
add_checked_string_function(mod, 'etlxlib_ETLX_ReplaceQueryStringDate', retval('char*'), [param('int64_t', '_handle'), param('char*', 'query'), param('char*', 'dateRef')])
add_checked_string_function(mod, 'etlxlib_ETLX_ReplaceEnvVariable', retval('char*'), [param('int64_t', '_handle'), param('char*', 'input')])
add_checked_string_function(mod, 'etlxlib_ETLX_TempFIle', retval('char*'), [param('int64_t', '_handle'), param('char*', 'content'), param('char*', 'name')])
add_checked_string_function(mod, 'etlxlib_ETLX_ConvertIPYNBToMarkdown', retval('char*'), [param('int64_t', '_handle'), param('int64_t', 'ipynbContent')])
add_checked_function(mod, 'etlxlib_ETLX_LoadREQUIRES', retval('int64_t'), [param('int64_t', '_handle'), param('int64_t', 'conf'), param('int64_t', 'keys')])
add_checked_function(mod, 'etlxlib_ETLX_GetDB', retval('int64_t'), [param('int64_t', '_handle'), param('char*', 'conn')])
add_checked_string_function(mod, 'etlxlib_ETLX_SetQueryPlaceholders', retval('char*'), [param('int64_t', '_handle'), param('char*', 'query'), param('char*', 'table'), param('char*', 'path'), param('int64_t', 'dateRef')])
add_checked_string_function(mod, 'etlxlib_ETLX_ReplacePlaceholders', retval('char*'), [param('int64_t', '_handle'), param('char*', 'sql'), param('int64_t', 'item')])
add_checked_function(mod, 'etlxlib_ETLX_ExecuteQuery', retval('char*'), [param('int64_t', '_handle'), param('int64_t', 'conn'), param('int64_t', 'sqlData'), param('int64_t', 'item'), param('char*', 'fname'), param('char*', 'step'), param('int64_t', 'dateRef')])
add_checked_function(mod, 'etlxlib_ETLX_RunETL', retval('int64_t'), [param('int64_t', '_handle'), param('int64_t', 'dateRef'), param('int64_t', 'conf'), param('int64_t', 'extraConf'), param('int64_t', 'keys')])
add_checked_function(mod, 'etlxlib_ETLX_RunEXPORTS', retval('int64_t'), [param('int64_t', '_handle'), param('int64_t', 'dateRef'), param('int64_t', 'conf'), param('int64_t', 'extraConf'), param('int64_t', 'keys')])
add_checked_function(mod, 'etlxlib_ETLX_RunMULTI_QUERIES', retval('int64_t'), [param('int64_t', '_handle'), param('int64_t', 'dateRef'), param('int64_t', 'conf'), param('int64_t', 'extraConf'), param('int64_t', 'keys')])
mod.add_function('db_ODBC_CTor', retval('int64_t'), [])
add_checked_function(mod, 'db_ODBC_ExecuteQuery', retval('int64_t'), [param('int64_t', '_handle'), param('char*', 'query'), param('int64_t', 'data')])
add_checked_function(mod, 'db_ODBC_ExecuteQueryRowsAffected', retval('int64_t'), [param('int64_t', '_handle'), param('char*', 'query'), param('int64_t', 'data')])
add_checked_function(mod, 'db_ODBC_ExecuteNamedQuery', retval('int64_t'), [param('int64_t', '_handle'), param('char*', 'query'), param('int64_t', 'data')])
add_checked_function(mod, 'db_ODBC_ExecuteQueryPGInsertWithLastInsertId', retval('int64_t'), [param('int64_t', '_handle'), param('char*', 'query'), param('int64_t', 'data')])
add_checked_function(mod, 'db_ODBC_Query2CSV', retval('bool'), [param('int64_t', '_handle'), param('char*', 'query'), param('char*', 'csv_path'), param('int64_t', 'params')])
add_checked_string_function(mod, 'db_ODBC_GetDriverName', retval('char*'), [param('int64_t', '_handle')])
add_checked_function(mod, 'db_ODBC_IsEmpty', retval('bool'), [param('int64_t', '_handle'), param('char*', 'value')])
add_checked_function(mod, 'etlx_LoadDotEnv', None, [param('bool', 'goRun')])

mod.generate(open('etlx.c', 'w'))

