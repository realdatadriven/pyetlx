/*
cgo stubs for package etlx.
File is generated by gopy. Do not edit.
gopy gen github.com/realdatadriven/etlx
*/

package main

/*

#cgo CFLAGS: "-IC:/Users/joaot/Python/Python310/Include" -Wno-error -Wno-implicit-function-declaration -Wno-int-conversion
#cgo LDFLAGS: "-LC:/Users/joaot/Python/Python310/libs" "-lpython310"

// #define Py_LIMITED_API // need full API for PyRun*
#include <Python.h>
typedef uint8_t bool;
// static inline is trick for avoiding need for extra .c file
// the following are used for build value -- switch on reflect.Kind
// or the types equivalent
static inline PyObject* gopy_build_bool(uint8_t val) {
	return Py_BuildValue("b", val);
}
static inline PyObject* gopy_build_int64(int64_t val) {
	return Py_BuildValue("k", val);
}
static inline PyObject* gopy_build_uint64(uint64_t val) {
	return Py_BuildValue("K", val);
}
static inline PyObject* gopy_build_float64(double val) {
	return Py_BuildValue("d", val);
}
static inline PyObject* gopy_build_string(const char* val) {
	return Py_BuildValue("s", val);
}
static inline void gopy_decref(PyObject* obj) { // macro
	Py_XDECREF(obj);
}
static inline void gopy_incref(PyObject* obj) { // macro
	Py_XINCREF(obj);
}
static inline int gopy_method_check(PyObject* obj) { // macro
	return PyMethod_Check(obj);
}
static inline void gopy_err_handle() {
	if(PyErr_Occurred() != NULL) {
		PyErr_Print();
	}
}

*/
import "C"
import (
	"errors"
	"fmt"
	"reflect"
	"unsafe"

	"github.com/go-python/gopy/gopyh" // handler

	"time"

	"github.com/realdatadriven/etlx"
	"github.com/yuin/goldmark/ast"
	"github.com/yuin/goldmark/text"
)

// main doesn't do anything in lib / pkg mode, but is essential for exe mode
func main() {

}

// initialization functions -- can be called from python after library is loaded
// GoPyInitRunFile runs a separate python file -- call in GoPyInit if it
// steals the main thread e.g., for GUI event loop, as in GoGi startup.

//export GoPyInit
func GoPyInit() {

}

// type for the handle -- int64 for speed (can switch to string)
type GoHandle int64
type CGoHandle C.longlong

// DecRef decrements the reference count for the specified handle
// and deletes it it goes to zero.
//
//export DecRef
func DecRef(handle CGoHandle) {
	gopyh.DecRef(gopyh.CGoHandle(handle))
}

// IncRef increments the reference count for the specified handle.
//
//export IncRef
func IncRef(handle CGoHandle) {
	gopyh.IncRef(gopyh.CGoHandle(handle))
}

// NumHandles returns the number of handles currently in use.
//
//export NumHandles
func NumHandles() int {
	return gopyh.NumHandles()
}

// boolGoToPy converts a Go bool to python-compatible C.char
func boolGoToPy(b bool) C.char {
	if b {
		return 1
	}
	return 0
}

// boolPyToGo converts a python-compatible C.Char to Go bool
func boolPyToGo(b C.char) bool {
	if b != 0 {
		return true
	}
	return false
}

func complex64GoToPy(c complex64) *C.PyObject {
	return C.PyComplex_FromDoubles(C.double(real(c)), C.double(imag(c)))
}

func complex64PyToGo(o *C.PyObject) complex64 {
	v := C.PyComplex_AsCComplex(o)
	return complex(float32(v.real), float32(v.imag))
}

func complex128GoToPy(c complex128) *C.PyObject {
	return C.PyComplex_FromDoubles(C.double(real(c)), C.double(imag(c)))
}

func complex128PyToGo(o *C.PyObject) complex128 {
	v := C.PyComplex_AsCComplex(o)
	return complex(float64(v.real), float64(v.imag))
}

// errorGoToPy converts a Go error to python-compatible C.CString
func errorGoToPy(e error) *C.char {
	if e != nil {
		return C.CString(e.Error())
	}
	return C.CString("")
}

// --- generated code for package: etlx below: ---

// ---- External Types Outside of Targeted Packages ---

// Converters for pointer handles for type: *etlx.DB
func ptrFromHandle_Ptr_db_DB(h CGoHandle) *etlx.DB {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*etlx.DB")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(etlx.DB{})).(*etlx.DB)
}
func handleFromPtr_Ptr_db_DB(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*etlx.DB", p))
}

// Converters for pointer handles for type: *etlx.DuckDB
func ptrFromHandle_Ptr_db_DuckDB(h CGoHandle) *etlx.DuckDB {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*etlx.DuckDB")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(etlx.DuckDB{})).(*etlx.DuckDB)
}
func handleFromPtr_Ptr_db_DuckDB(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*etlx.DuckDB", p))
}

// Converters for pointer handles for type: *etlx.ODBC
func ptrFromHandle_Ptr_db_ODBC(h CGoHandle) *etlx.ODBC {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*etlx.ODBC")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(etlx.ODBC{})).(*etlx.ODBC)
}
func handleFromPtr_Ptr_db_ODBC(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*etlx.ODBC", p))
}

// Converters for pointer handles for type: *etlx.ETLX
func ptrFromHandle_Ptr_etlxlib_ETLX(h CGoHandle) *etlx.ETLX {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*etlx.ETLX")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(etlx.ETLX{})).(*etlx.ETLX)
}
func handleFromPtr_Ptr_etlxlib_ETLX(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*etlx.ETLX", p))
}

// Converters for pointer handles for type: *time.Location
func ptrFromHandle_Ptr_time_Location(h CGoHandle) *time.Location {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*time.Location")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(time.Location{})).(*time.Location)
}
func handleFromPtr_Ptr_time_Location(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*time.Location", p))
}

// Converters for non-pointer handles for type: etlx.DB
func ptrFromHandle_db_DB(h CGoHandle) *etlx.DB {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "etlx.DB")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(etlx.DB{})).(*etlx.DB)
}
func handleFromPtr_db_DB(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("etlx.DB", p))
}

// Converters for pointer handles for type: etlx.DBInterface
func ptrFromHandle_db_DBInterface(h CGoHandle) etlx.DBInterface {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "etlx.DBInterface")
	if p == nil {
		return nil
	}
	return p.(etlx.DBInterface)
}
func handleFromPtr_db_DBInterface(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("etlx.DBInterface", p))
}

// Converters for non-pointer handles for type: etlx.DuckDB
func ptrFromHandle_db_DuckDB(h CGoHandle) *etlx.DuckDB {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "etlx.DuckDB")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(etlx.DuckDB{})).(*etlx.DuckDB)
}
func handleFromPtr_db_DuckDB(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("etlx.DuckDB", p))
}

// Converters for non-pointer handles for type: etlx.ODBC
func ptrFromHandle_db_ODBC(h CGoHandle) *etlx.ODBC {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "etlx.ODBC")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(etlx.ODBC{})).(*etlx.ODBC)
}
func handleFromPtr_db_ODBC(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("etlx.ODBC", p))
}

// Converters for non-pointer handles for type: etlx.ETLX
func ptrFromHandle_etlxlib_ETLX(h CGoHandle) *etlx.ETLX {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "etlx.ETLX")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(etlx.ETLX{})).(*etlx.ETLX)
}
func handleFromPtr_etlxlib_ETLX(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("etlx.ETLX", p))
}

// Converters for pointer handles for type: ast.Node
func ptrFromHandle_ast_Node(h CGoHandle) ast.Node {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "ast.Node")
	if p == nil {
		return nil
	}
	return p.(ast.Node)
}
func handleFromPtr_ast_Node(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("ast.Node", p))
}

// Converters for pointer handles for type: text.Reader
func ptrFromHandle_text_Reader(h CGoHandle) text.Reader {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "text.Reader")
	if p == nil {
		return nil
	}
	return p.(text.Reader)
}
func handleFromPtr_text_Reader(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("text.Reader", p))
}

// Converters for non-pointer handles for type: time.Location
func ptrFromHandle_time_Location(h CGoHandle) *time.Location {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "time.Location")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(time.Location{})).(*time.Location)
}
func handleFromPtr_time_Location(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("time.Location", p))
}

// Converters for non-pointer handles for type: time.Time
func ptrFromHandle_time_Time(h CGoHandle) *time.Time {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "time.Time")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(time.Time{})).(*time.Time)
}
func handleFromPtr_time_Time(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("time.Time", p))
}

// ---- Package: go ---

// ---- Types ---

// Converters for implicit pointer handles for type: []bool
func ptrFromHandle_Slice_bool(h CGoHandle) *[]bool {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]bool")
	if p == nil {
		return nil
	}
	return p.(*[]bool)
}
func deptrFromHandle_Slice_bool(h CGoHandle) []bool {
	p := ptrFromHandle_Slice_bool(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_bool(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]bool", p))
}

// --- wrapping slice: []bool ---
//
//export Slice_bool_CTor
func Slice_bool_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_bool(&[]bool{}))
}

//export Slice_bool_len
func Slice_bool_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_bool(handle))
}

//export Slice_bool_elem
func Slice_bool_elem(handle CGoHandle, _idx int) C.char {
	s := deptrFromHandle_Slice_bool(handle)
	return boolGoToPy(s[_idx])
}

//export Slice_bool_subslice
func Slice_bool_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_bool(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_bool(&ss))
}

//export Slice_bool_set
func Slice_bool_set(handle CGoHandle, _idx int, _vl C.char) {
	s := deptrFromHandle_Slice_bool(handle)
	s[_idx] = boolPyToGo(_vl)
}

//export Slice_bool_append
func Slice_bool_append(handle CGoHandle, _vl C.char) {
	s := ptrFromHandle_Slice_bool(handle)
	*s = append(*s, boolPyToGo(_vl))
}

// Converters for implicit pointer handles for type: []byte
func ptrFromHandle_Slice_byte(h CGoHandle) *[]byte {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]byte")
	if p == nil {
		return nil
	}
	return p.(*[]byte)
}
func deptrFromHandle_Slice_byte(h CGoHandle) []byte {
	p := ptrFromHandle_Slice_byte(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_byte(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]byte", p))
}

// --- wrapping slice: []byte ---
//
//export Slice_byte_CTor
func Slice_byte_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_byte(&[]byte{}))
}

//export Slice_byte_len
func Slice_byte_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_byte(handle))
}

//export Slice_byte_elem
func Slice_byte_elem(handle CGoHandle, _idx int) C.char {
	s := deptrFromHandle_Slice_byte(handle)
	return C.char(s[_idx])
}

//export Slice_byte_subslice
func Slice_byte_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_byte(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_byte(&ss))
}

//export Slice_byte_set
func Slice_byte_set(handle CGoHandle, _idx int, _vl C.char) {
	s := deptrFromHandle_Slice_byte(handle)
	s[_idx] = byte(_vl)
}

//export Slice_byte_append
func Slice_byte_append(handle CGoHandle, _vl C.char) {
	s := ptrFromHandle_Slice_byte(handle)
	*s = append(*s, byte(_vl))
}

//export Slice_byte_from_bytes
func Slice_byte_from_bytes(o *C.PyObject) CGoHandle {
	size := C.PyBytes_Size(o)
	ptr := unsafe.Pointer(C.PyBytes_AsString(o))
	data := make([]byte, size)
	tmp := unsafe.Slice((*byte)(ptr), size)
	copy(data, tmp)
	return handleFromPtr_Slice_byte(&data)
}

//export Slice_byte_to_bytes
func Slice_byte_to_bytes(handle CGoHandle) *C.PyObject {
	s := deptrFromHandle_Slice_byte(handle)
	ptr := unsafe.Pointer(&s[0])
	size := len(s)
	return C.PyBytes_FromStringAndSize((*C.char)(ptr), C.longlong(size))
}

// Converters for implicit pointer handles for type: []error
func ptrFromHandle_Slice_error(h CGoHandle) *[]error {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]error")
	if p == nil {
		return nil
	}
	return p.(*[]error)
}
func deptrFromHandle_Slice_error(h CGoHandle) []error {
	p := ptrFromHandle_Slice_error(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_error(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]error", p))
}

// --- wrapping slice: []error ---
//
//export Slice_error_CTor
func Slice_error_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_error(&[]error{}))
}

//export Slice_error_len
func Slice_error_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_error(handle))
}

//export Slice_error_elem
func Slice_error_elem(handle CGoHandle, _idx int) *C.char {
	s := deptrFromHandle_Slice_error(handle)
	return errorGoToPy(s[_idx])
}

//export Slice_error_subslice
func Slice_error_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_error(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_error(&ss))
}

//export Slice_error_set
func Slice_error_set(handle CGoHandle, _idx int, _vl *C.char) {
	s := deptrFromHandle_Slice_error(handle)
	s[_idx] = errors.New(C.GoString(_vl))
}

//export Slice_error_append
func Slice_error_append(handle CGoHandle, _vl *C.char) {
	s := ptrFromHandle_Slice_error(handle)
	*s = append(*s, errors.New(C.GoString(_vl)))
}

// Converters for implicit pointer handles for type: []float32
func ptrFromHandle_Slice_float32(h CGoHandle) *[]float32 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]float32")
	if p == nil {
		return nil
	}
	return p.(*[]float32)
}
func deptrFromHandle_Slice_float32(h CGoHandle) []float32 {
	p := ptrFromHandle_Slice_float32(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_float32(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]float32", p))
}

// --- wrapping slice: []float32 ---
//
//export Slice_float32_CTor
func Slice_float32_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_float32(&[]float32{}))
}

//export Slice_float32_len
func Slice_float32_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_float32(handle))
}

//export Slice_float32_elem
func Slice_float32_elem(handle CGoHandle, _idx int) C.float {
	s := deptrFromHandle_Slice_float32(handle)
	return C.float(s[_idx])
}

//export Slice_float32_subslice
func Slice_float32_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_float32(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_float32(&ss))
}

//export Slice_float32_set
func Slice_float32_set(handle CGoHandle, _idx int, _vl C.float) {
	s := deptrFromHandle_Slice_float32(handle)
	s[_idx] = float32(_vl)
}

//export Slice_float32_append
func Slice_float32_append(handle CGoHandle, _vl C.float) {
	s := ptrFromHandle_Slice_float32(handle)
	*s = append(*s, float32(_vl))
}

// Converters for implicit pointer handles for type: []float64
func ptrFromHandle_Slice_float64(h CGoHandle) *[]float64 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]float64")
	if p == nil {
		return nil
	}
	return p.(*[]float64)
}
func deptrFromHandle_Slice_float64(h CGoHandle) []float64 {
	p := ptrFromHandle_Slice_float64(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_float64(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]float64", p))
}

// --- wrapping slice: []float64 ---
//
//export Slice_float64_CTor
func Slice_float64_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_float64(&[]float64{}))
}

//export Slice_float64_len
func Slice_float64_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_float64(handle))
}

//export Slice_float64_elem
func Slice_float64_elem(handle CGoHandle, _idx int) C.double {
	s := deptrFromHandle_Slice_float64(handle)
	return C.double(s[_idx])
}

//export Slice_float64_subslice
func Slice_float64_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_float64(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_float64(&ss))
}

//export Slice_float64_set
func Slice_float64_set(handle CGoHandle, _idx int, _vl C.double) {
	s := deptrFromHandle_Slice_float64(handle)
	s[_idx] = float64(_vl)
}

//export Slice_float64_append
func Slice_float64_append(handle CGoHandle, _vl C.double) {
	s := ptrFromHandle_Slice_float64(handle)
	*s = append(*s, float64(_vl))
}

// Converters for implicit pointer handles for type: []int
func ptrFromHandle_Slice_int(h CGoHandle) *[]int {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int")
	if p == nil {
		return nil
	}
	return p.(*[]int)
}
func deptrFromHandle_Slice_int(h CGoHandle) []int {
	p := ptrFromHandle_Slice_int(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int", p))
}

// --- wrapping slice: []int ---
//
//export Slice_int_CTor
func Slice_int_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int(&[]int{}))
}

//export Slice_int_len
func Slice_int_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int(handle))
}

//export Slice_int_elem
func Slice_int_elem(handle CGoHandle, _idx int) C.longlong {
	s := deptrFromHandle_Slice_int(handle)
	return C.longlong(s[_idx])
}

//export Slice_int_subslice
func Slice_int_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int(&ss))
}

//export Slice_int_set
func Slice_int_set(handle CGoHandle, _idx int, _vl C.longlong) {
	s := deptrFromHandle_Slice_int(handle)
	s[_idx] = int(_vl)
}

//export Slice_int_append
func Slice_int_append(handle CGoHandle, _vl C.longlong) {
	s := ptrFromHandle_Slice_int(handle)
	*s = append(*s, int(_vl))
}

// Converters for implicit pointer handles for type: []int16
func ptrFromHandle_Slice_int16(h CGoHandle) *[]int16 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int16")
	if p == nil {
		return nil
	}
	return p.(*[]int16)
}
func deptrFromHandle_Slice_int16(h CGoHandle) []int16 {
	p := ptrFromHandle_Slice_int16(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int16(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int16", p))
}

// --- wrapping slice: []int16 ---
//
//export Slice_int16_CTor
func Slice_int16_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int16(&[]int16{}))
}

//export Slice_int16_len
func Slice_int16_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int16(handle))
}

//export Slice_int16_elem
func Slice_int16_elem(handle CGoHandle, _idx int) C.short {
	s := deptrFromHandle_Slice_int16(handle)
	return C.short(s[_idx])
}

//export Slice_int16_subslice
func Slice_int16_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int16(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int16(&ss))
}

//export Slice_int16_set
func Slice_int16_set(handle CGoHandle, _idx int, _vl C.short) {
	s := deptrFromHandle_Slice_int16(handle)
	s[_idx] = int16(_vl)
}

//export Slice_int16_append
func Slice_int16_append(handle CGoHandle, _vl C.short) {
	s := ptrFromHandle_Slice_int16(handle)
	*s = append(*s, int16(_vl))
}

// Converters for implicit pointer handles for type: []int32
func ptrFromHandle_Slice_int32(h CGoHandle) *[]int32 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int32")
	if p == nil {
		return nil
	}
	return p.(*[]int32)
}
func deptrFromHandle_Slice_int32(h CGoHandle) []int32 {
	p := ptrFromHandle_Slice_int32(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int32(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int32", p))
}

// --- wrapping slice: []int32 ---
//
//export Slice_int32_CTor
func Slice_int32_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int32(&[]int32{}))
}

//export Slice_int32_len
func Slice_int32_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int32(handle))
}

//export Slice_int32_elem
func Slice_int32_elem(handle CGoHandle, _idx int) C.long {
	s := deptrFromHandle_Slice_int32(handle)
	return C.long(s[_idx])
}

//export Slice_int32_subslice
func Slice_int32_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int32(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int32(&ss))
}

//export Slice_int32_set
func Slice_int32_set(handle CGoHandle, _idx int, _vl C.long) {
	s := deptrFromHandle_Slice_int32(handle)
	s[_idx] = int32(_vl)
}

//export Slice_int32_append
func Slice_int32_append(handle CGoHandle, _vl C.long) {
	s := ptrFromHandle_Slice_int32(handle)
	*s = append(*s, int32(_vl))
}

// Converters for implicit pointer handles for type: []int64
func ptrFromHandle_Slice_int64(h CGoHandle) *[]int64 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int64")
	if p == nil {
		return nil
	}
	return p.(*[]int64)
}
func deptrFromHandle_Slice_int64(h CGoHandle) []int64 {
	p := ptrFromHandle_Slice_int64(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int64(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int64", p))
}

// --- wrapping slice: []int64 ---
//
//export Slice_int64_CTor
func Slice_int64_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int64(&[]int64{}))
}

//export Slice_int64_len
func Slice_int64_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int64(handle))
}

//export Slice_int64_elem
func Slice_int64_elem(handle CGoHandle, _idx int) C.longlong {
	s := deptrFromHandle_Slice_int64(handle)
	return C.longlong(s[_idx])
}

//export Slice_int64_subslice
func Slice_int64_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int64(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int64(&ss))
}

//export Slice_int64_set
func Slice_int64_set(handle CGoHandle, _idx int, _vl C.longlong) {
	s := deptrFromHandle_Slice_int64(handle)
	s[_idx] = int64(_vl)
}

//export Slice_int64_append
func Slice_int64_append(handle CGoHandle, _vl C.longlong) {
	s := ptrFromHandle_Slice_int64(handle)
	*s = append(*s, int64(_vl))
}

// Converters for implicit pointer handles for type: []int8
func ptrFromHandle_Slice_int8(h CGoHandle) *[]int8 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int8")
	if p == nil {
		return nil
	}
	return p.(*[]int8)
}
func deptrFromHandle_Slice_int8(h CGoHandle) []int8 {
	p := ptrFromHandle_Slice_int8(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int8(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int8", p))
}

// --- wrapping slice: []int8 ---
//
//export Slice_int8_CTor
func Slice_int8_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int8(&[]int8{}))
}

//export Slice_int8_len
func Slice_int8_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int8(handle))
}

//export Slice_int8_elem
func Slice_int8_elem(handle CGoHandle, _idx int) C.char {
	s := deptrFromHandle_Slice_int8(handle)
	return C.char(s[_idx])
}

//export Slice_int8_subslice
func Slice_int8_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int8(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int8(&ss))
}

//export Slice_int8_set
func Slice_int8_set(handle CGoHandle, _idx int, _vl C.char) {
	s := deptrFromHandle_Slice_int8(handle)
	s[_idx] = int8(_vl)
}

//export Slice_int8_append
func Slice_int8_append(handle CGoHandle, _vl C.char) {
	s := ptrFromHandle_Slice_int8(handle)
	*s = append(*s, int8(_vl))
}

// Converters for implicit pointer handles for type: []rune
func ptrFromHandle_Slice_rune(h CGoHandle) *[]rune {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]rune")
	if p == nil {
		return nil
	}
	return p.(*[]rune)
}
func deptrFromHandle_Slice_rune(h CGoHandle) []rune {
	p := ptrFromHandle_Slice_rune(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_rune(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]rune", p))
}

// --- wrapping slice: []rune ---
//
//export Slice_rune_CTor
func Slice_rune_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_rune(&[]rune{}))
}

//export Slice_rune_len
func Slice_rune_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_rune(handle))
}

//export Slice_rune_elem
func Slice_rune_elem(handle CGoHandle, _idx int) C.long {
	s := deptrFromHandle_Slice_rune(handle)
	return C.long(s[_idx])
}

//export Slice_rune_subslice
func Slice_rune_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_rune(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_rune(&ss))
}

//export Slice_rune_set
func Slice_rune_set(handle CGoHandle, _idx int, _vl C.long) {
	s := deptrFromHandle_Slice_rune(handle)
	s[_idx] = rune(_vl)
}

//export Slice_rune_append
func Slice_rune_append(handle CGoHandle, _vl C.long) {
	s := ptrFromHandle_Slice_rune(handle)
	*s = append(*s, rune(_vl))
}

// Converters for implicit pointer handles for type: []string
func ptrFromHandle_Slice_string(h CGoHandle) *[]string {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]string")
	if p == nil {
		return nil
	}
	return p.(*[]string)
}
func deptrFromHandle_Slice_string(h CGoHandle) []string {
	p := ptrFromHandle_Slice_string(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_string(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]string", p))
}

// --- wrapping slice: []string ---
//
//export Slice_string_CTor
func Slice_string_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_string(&[]string{}))
}

//export Slice_string_len
func Slice_string_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_string(handle))
}

//export Slice_string_elem
func Slice_string_elem(handle CGoHandle, _idx int) *C.char {
	s := deptrFromHandle_Slice_string(handle)
	return C.CString(s[_idx])
}

//export Slice_string_subslice
func Slice_string_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_string(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_string(&ss))
}

//export Slice_string_set
func Slice_string_set(handle CGoHandle, _idx int, _vl *C.char) {
	s := deptrFromHandle_Slice_string(handle)
	s[_idx] = C.GoString(_vl)
}

//export Slice_string_append
func Slice_string_append(handle CGoHandle, _vl *C.char) {
	s := ptrFromHandle_Slice_string(handle)
	*s = append(*s, C.GoString(_vl))
}

// Converters for implicit pointer handles for type: []uint
func ptrFromHandle_Slice_uint(h CGoHandle) *[]uint {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint")
	if p == nil {
		return nil
	}
	return p.(*[]uint)
}
func deptrFromHandle_Slice_uint(h CGoHandle) []uint {
	p := ptrFromHandle_Slice_uint(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint", p))
}

// --- wrapping slice: []uint ---
//
//export Slice_uint_CTor
func Slice_uint_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint(&[]uint{}))
}

//export Slice_uint_len
func Slice_uint_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint(handle))
}

//export Slice_uint_elem
func Slice_uint_elem(handle CGoHandle, _idx int) C.ulonglong {
	s := deptrFromHandle_Slice_uint(handle)
	return C.ulonglong(s[_idx])
}

//export Slice_uint_subslice
func Slice_uint_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint(&ss))
}

//export Slice_uint_set
func Slice_uint_set(handle CGoHandle, _idx int, _vl C.ulonglong) {
	s := deptrFromHandle_Slice_uint(handle)
	s[_idx] = uint(_vl)
}

//export Slice_uint_append
func Slice_uint_append(handle CGoHandle, _vl C.ulonglong) {
	s := ptrFromHandle_Slice_uint(handle)
	*s = append(*s, uint(_vl))
}

// Converters for implicit pointer handles for type: []uint16
func ptrFromHandle_Slice_uint16(h CGoHandle) *[]uint16 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint16")
	if p == nil {
		return nil
	}
	return p.(*[]uint16)
}
func deptrFromHandle_Slice_uint16(h CGoHandle) []uint16 {
	p := ptrFromHandle_Slice_uint16(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint16(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint16", p))
}

// --- wrapping slice: []uint16 ---
//
//export Slice_uint16_CTor
func Slice_uint16_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint16(&[]uint16{}))
}

//export Slice_uint16_len
func Slice_uint16_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint16(handle))
}

//export Slice_uint16_elem
func Slice_uint16_elem(handle CGoHandle, _idx int) C.ushort {
	s := deptrFromHandle_Slice_uint16(handle)
	return C.ushort(s[_idx])
}

//export Slice_uint16_subslice
func Slice_uint16_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint16(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint16(&ss))
}

//export Slice_uint16_set
func Slice_uint16_set(handle CGoHandle, _idx int, _vl C.ushort) {
	s := deptrFromHandle_Slice_uint16(handle)
	s[_idx] = uint16(_vl)
}

//export Slice_uint16_append
func Slice_uint16_append(handle CGoHandle, _vl C.ushort) {
	s := ptrFromHandle_Slice_uint16(handle)
	*s = append(*s, uint16(_vl))
}

// Converters for implicit pointer handles for type: []uint32
func ptrFromHandle_Slice_uint32(h CGoHandle) *[]uint32 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint32")
	if p == nil {
		return nil
	}
	return p.(*[]uint32)
}
func deptrFromHandle_Slice_uint32(h CGoHandle) []uint32 {
	p := ptrFromHandle_Slice_uint32(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint32(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint32", p))
}

// --- wrapping slice: []uint32 ---
//
//export Slice_uint32_CTor
func Slice_uint32_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint32(&[]uint32{}))
}

//export Slice_uint32_len
func Slice_uint32_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint32(handle))
}

//export Slice_uint32_elem
func Slice_uint32_elem(handle CGoHandle, _idx int) C.ulong {
	s := deptrFromHandle_Slice_uint32(handle)
	return C.ulong(s[_idx])
}

//export Slice_uint32_subslice
func Slice_uint32_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint32(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint32(&ss))
}

//export Slice_uint32_set
func Slice_uint32_set(handle CGoHandle, _idx int, _vl C.ulong) {
	s := deptrFromHandle_Slice_uint32(handle)
	s[_idx] = uint32(_vl)
}

//export Slice_uint32_append
func Slice_uint32_append(handle CGoHandle, _vl C.ulong) {
	s := ptrFromHandle_Slice_uint32(handle)
	*s = append(*s, uint32(_vl))
}

// Converters for implicit pointer handles for type: []uint64
func ptrFromHandle_Slice_uint64(h CGoHandle) *[]uint64 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint64")
	if p == nil {
		return nil
	}
	return p.(*[]uint64)
}
func deptrFromHandle_Slice_uint64(h CGoHandle) []uint64 {
	p := ptrFromHandle_Slice_uint64(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint64(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint64", p))
}

// --- wrapping slice: []uint64 ---
//
//export Slice_uint64_CTor
func Slice_uint64_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint64(&[]uint64{}))
}

//export Slice_uint64_len
func Slice_uint64_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint64(handle))
}

//export Slice_uint64_elem
func Slice_uint64_elem(handle CGoHandle, _idx int) C.ulonglong {
	s := deptrFromHandle_Slice_uint64(handle)
	return C.ulonglong(s[_idx])
}

//export Slice_uint64_subslice
func Slice_uint64_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint64(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint64(&ss))
}

//export Slice_uint64_set
func Slice_uint64_set(handle CGoHandle, _idx int, _vl C.ulonglong) {
	s := deptrFromHandle_Slice_uint64(handle)
	s[_idx] = uint64(_vl)
}

//export Slice_uint64_append
func Slice_uint64_append(handle CGoHandle, _vl C.ulonglong) {
	s := ptrFromHandle_Slice_uint64(handle)
	*s = append(*s, uint64(_vl))
}

// Converters for implicit pointer handles for type: []uint8
func ptrFromHandle_Slice_uint8(h CGoHandle) *[]uint8 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint8")
	if p == nil {
		return nil
	}
	return p.(*[]uint8)
}
func deptrFromHandle_Slice_uint8(h CGoHandle) []uint8 {
	p := ptrFromHandle_Slice_uint8(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint8(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint8", p))
}

// --- wrapping slice: []uint8 ---
//
//export Slice_uint8_CTor
func Slice_uint8_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint8(&[]uint8{}))
}

//export Slice_uint8_len
func Slice_uint8_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint8(handle))
}

//export Slice_uint8_elem
func Slice_uint8_elem(handle CGoHandle, _idx int) C.uchar {
	s := deptrFromHandle_Slice_uint8(handle)
	return C.uchar(s[_idx])
}

//export Slice_uint8_subslice
func Slice_uint8_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint8(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint8(&ss))
}

//export Slice_uint8_set
func Slice_uint8_set(handle CGoHandle, _idx int, _vl C.uchar) {
	s := deptrFromHandle_Slice_uint8(handle)
	s[_idx] = uint8(_vl)
}

//export Slice_uint8_append
func Slice_uint8_append(handle CGoHandle, _vl C.uchar) {
	s := ptrFromHandle_Slice_uint8(handle)
	*s = append(*s, uint8(_vl))
}

// ---- Package: etlx ---

// ---- Types ---

// Converters for implicit pointer handles for type: []interface{}
func ptrFromHandle_Slice_interface_(h CGoHandle) *[]interface{} {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]interface{}")
	if p == nil {
		return nil
	}
	return p.(*[]interface{})
}
func deptrFromHandle_Slice_interface_(h CGoHandle) []interface{} {
	p := ptrFromHandle_Slice_interface_(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_interface_(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]interface{}", p))
}

// --- wrapping slice: []interface{} ---
//
//export Slice_interface__CTor
func Slice_interface__CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_interface_(&[]interface{}{}))
}

//export Slice_interface__len
func Slice_interface__len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_interface_(handle))
}

//export Slice_interface__elem
func Slice_interface__elem(handle CGoHandle, _idx int) *C.char {
	s := deptrFromHandle_Slice_interface_(handle)
	return C.CString(fmt.Sprintf("%s", (s[_idx])))
}

//export Slice_interface__subslice
func Slice_interface__subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_interface_(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_interface_(&ss))
}

//export Slice_interface__set
func Slice_interface__set(handle CGoHandle, _idx int, _vl *C.char) {
	s := deptrFromHandle_Slice_interface_(handle)
	s[_idx] = C.GoString(_vl)
}

//export Slice_interface__append
func Slice_interface__append(handle CGoHandle, _vl *C.char) {
	s := ptrFromHandle_Slice_interface_(handle)
	*s = append(*s, C.GoString(_vl))
}

// Converters for implicit pointer handles for type: []map[string]any
func ptrFromHandle_Slice_Map_string_any(h CGoHandle) *[]map[string]any {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]map[string]any")
	if p == nil {
		return nil
	}
	return p.(*[]map[string]any)
}
func deptrFromHandle_Slice_Map_string_any(h CGoHandle) []map[string]any {
	p := ptrFromHandle_Slice_Map_string_any(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_Map_string_any(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]map[string]any", p))
}

// --- wrapping slice: []map[string]any ---
//
//export Slice_Map_string_any_CTor
func Slice_Map_string_any_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_Map_string_any(&[]map[string]any{}))
}

//export Slice_Map_string_any_len
func Slice_Map_string_any_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_Map_string_any(handle))
}

//export Slice_Map_string_any_elem
func Slice_Map_string_any_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_Slice_Map_string_any(handle)
	return handleFromPtr_Map_string_any(&(s[_idx]))
}

//export Slice_Map_string_any_subslice
func Slice_Map_string_any_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_Map_string_any(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_Map_string_any(&ss))
}

//export Slice_Map_string_any_set
func Slice_Map_string_any_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_Slice_Map_string_any(handle)
	s[_idx] = deptrFromHandle_Map_string_any(_vl)
}

//export Slice_Map_string_any_append
func Slice_Map_string_any_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_Slice_Map_string_any(handle)
	*s = append(*s, deptrFromHandle_Map_string_any(_vl))
}

// Converters for implicit pointer handles for type: []time.Time
func ptrFromHandle_Slice_time_Time(h CGoHandle) *[]time.Time {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]time.Time")
	if p == nil {
		return nil
	}
	return p.(*[]time.Time)
}
func deptrFromHandle_Slice_time_Time(h CGoHandle) []time.Time {
	p := ptrFromHandle_Slice_time_Time(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_time_Time(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]time.Time", p))
}

// --- wrapping slice: []time.Time ---
//
//export Slice_time_Time_CTor
func Slice_time_Time_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_time_Time(&[]time.Time{}))
}

//export Slice_time_Time_len
func Slice_time_Time_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_time_Time(handle))
}

//export Slice_time_Time_elem
func Slice_time_Time_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_Slice_time_Time(handle)
	return handleFromPtr_time_Time(&(s[_idx]))
}

//export Slice_time_Time_subslice
func Slice_time_Time_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_time_Time(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_time_Time(&ss))
}

//export Slice_time_Time_set
func Slice_time_Time_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_Slice_time_Time(handle)
	s[_idx] = *ptrFromHandle_time_Time(_vl)
}

//export Slice_time_Time_append
func Slice_time_Time_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_Slice_time_Time(handle)
	*s = append(*s, *ptrFromHandle_time_Time(_vl))
}

// Converters for pointer handles for type: any
func ptrFromHandle_any(h CGoHandle) any {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "any")
	if p == nil {
		return nil
	}
	return p.(any)
}
func handleFromPtr_any(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("any", p))
}

// Converters for implicit pointer handles for type: map[string]any
func ptrFromHandle_Map_string_any(h CGoHandle) *map[string]any {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "map[string]any")
	if p == nil {
		return nil
	}
	return p.(*map[string]any)
}
func deptrFromHandle_Map_string_any(h CGoHandle) map[string]any {
	p := ptrFromHandle_Map_string_any(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Map_string_any(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("map[string]any", p))
}

// --- wrapping map: map[string]any ---
//
//export Map_string_any_CTor
func Map_string_any_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Map_string_any(&map[string]any{}))
}

//export Map_string_any_len
func Map_string_any_len(handle CGoHandle) int {
	return len(deptrFromHandle_Map_string_any(handle))
}

//export Map_string_any_elem
func Map_string_any_elem(handle CGoHandle, _ky *C.char) CGoHandle {
	s := deptrFromHandle_Map_string_any(handle)
	v, ok := s[C.GoString(_ky)]
	if !ok {
		C.PyErr_SetString(C.PyExc_KeyError, C.CString("key not in map"))
	}
	return handleFromPtr_any(&v)
}

//export Map_string_any_contains
func Map_string_any_contains(handle CGoHandle, _ky *C.char) C.char {
	s := deptrFromHandle_Map_string_any(handle)
	_, ok := s[C.GoString(_ky)]
	return boolGoToPy(ok)
}

//export Map_string_any_set
func Map_string_any_set(handle CGoHandle, _ky *C.char, _vl CGoHandle) {
	s := deptrFromHandle_Map_string_any(handle)
	s[C.GoString(_ky)] = ptrFromHandle_any(_vl)
}

//export Map_string_any_delete
func Map_string_any_delete(handle CGoHandle, _ky *C.char) {
	s := deptrFromHandle_Map_string_any(handle)
	delete(s, C.GoString(_ky))
}

//export Map_string_any_keys
func Map_string_any_keys(handle CGoHandle) CGoHandle {
	s := deptrFromHandle_Map_string_any(handle)
	kys := make([]string, 0, len(s))
	for k := range s {
		kys = append(kys, k)
	}
	return handleFromPtr_Slice_string(&kys)
}

// Converters for implicit pointer handles for type: map[string]interface{}
func ptrFromHandle_Map_string_interface_(h CGoHandle) *map[string]interface{} {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "map[string]interface{}")
	if p == nil {
		return nil
	}
	return p.(*map[string]interface{})
}
func deptrFromHandle_Map_string_interface_(h CGoHandle) map[string]interface{} {
	p := ptrFromHandle_Map_string_interface_(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Map_string_interface_(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("map[string]interface{}", p))
}

// --- wrapping map: map[string]interface{} ---
//
//export Map_string_interface__CTor
func Map_string_interface__CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Map_string_interface_(&map[string]interface{}{}))
}

//export Map_string_interface__len
func Map_string_interface__len(handle CGoHandle) int {
	return len(deptrFromHandle_Map_string_interface_(handle))
}

//export Map_string_interface__elem
func Map_string_interface__elem(handle CGoHandle, _ky *C.char) *C.char {
	s := deptrFromHandle_Map_string_interface_(handle)
	v, ok := s[C.GoString(_ky)]
	if !ok {
		C.PyErr_SetString(C.PyExc_KeyError, C.CString("key not in map"))
	}
	return C.CString(fmt.Sprintf("%s", (v)))
}

//export Map_string_interface__contains
func Map_string_interface__contains(handle CGoHandle, _ky *C.char) C.char {
	s := deptrFromHandle_Map_string_interface_(handle)
	_, ok := s[C.GoString(_ky)]
	return boolGoToPy(ok)
}

//export Map_string_interface__set
func Map_string_interface__set(handle CGoHandle, _ky *C.char, _vl *C.char) {
	s := deptrFromHandle_Map_string_interface_(handle)
	s[C.GoString(_ky)] = C.GoString(_vl)
}

//export Map_string_interface__delete
func Map_string_interface__delete(handle CGoHandle, _ky *C.char) {
	s := deptrFromHandle_Map_string_interface_(handle)
	delete(s, C.GoString(_ky))
}

//export Map_string_interface__keys
func Map_string_interface__keys(handle CGoHandle) CGoHandle {
	s := deptrFromHandle_Map_string_interface_(handle)
	kys := make([]string, 0, len(s))
	for k := range s {
		kys = append(kys, k)
	}
	return handleFromPtr_Slice_string(&kys)
}

// ---- Global Variables: can only use functions to access ---

// ---- Interfaces ---

//export db_DBInterface_Close
func db_DBInterface_Close(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "etlx.DBInterface")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = vifc.(etlx.DBInterface).Close()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export db_DBInterface_ExecuteNamedQuery
func db_DBInterface_ExecuteNamedQuery(_handle CGoHandle, query *C.char, data CGoHandle) C.longlong {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "etlx.DBInterface")
	if __err != nil {
		return C.longlong(0)
	}
	cret, __err := vifc.(etlx.DBInterface).ExecuteNamedQuery(C.GoString(query), deptrFromHandle_Map_string_interface_(data))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return C.longlong(0)
	}
	return C.longlong(cret)
}

//export db_DBInterface_ExecuteQuery
func db_DBInterface_ExecuteQuery(_handle CGoHandle, query *C.char, data CGoHandle) C.longlong {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "etlx.DBInterface")
	if __err != nil {
		return C.longlong(0)
	}
	cret, __err := vifc.(etlx.DBInterface).ExecuteQuery(C.GoString(query), deptrFromHandle_Slice_interface_(data)...)

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return C.longlong(0)
	}
	return C.longlong(cret)
}

//export db_DBInterface_ExecuteQueryPGInsertWithLastInsertId
func db_DBInterface_ExecuteQueryPGInsertWithLastInsertId(_handle CGoHandle, query *C.char, data CGoHandle) C.longlong {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "etlx.DBInterface")
	if __err != nil {
		return C.longlong(0)
	}
	cret, __err := vifc.(etlx.DBInterface).ExecuteQueryPGInsertWithLastInsertId(C.GoString(query), deptrFromHandle_Slice_interface_(data)...)

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return C.longlong(0)
	}
	return C.longlong(cret)
}

//export db_DBInterface_ExecuteQueryRowsAffected
func db_DBInterface_ExecuteQueryRowsAffected(_handle CGoHandle, query *C.char, data CGoHandle) C.longlong {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "etlx.DBInterface")
	if __err != nil {
		return C.longlong(0)
	}
	cret, __err := vifc.(etlx.DBInterface).ExecuteQueryRowsAffected(C.GoString(query), deptrFromHandle_Slice_interface_(data)...)

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return C.longlong(0)
	}
	return C.longlong(cret)
}

//export db_DBInterface_GetDriverName
func db_DBInterface_GetDriverName(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "etlx.DBInterface")
	if __err != nil {
		return C.CString("")
	}
	return C.CString(vifc.(etlx.DBInterface).GetDriverName())

}

//export db_DBInterface_IsEmpty
func db_DBInterface_IsEmpty(_handle CGoHandle, value *C.char) C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "etlx.DBInterface")
	if __err != nil {
		return boolGoToPy(false)
	}
	return boolGoToPy(vifc.(etlx.DBInterface).IsEmpty(C.GoString(value)))

}

//export db_DBInterface_Ping
func db_DBInterface_Ping(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "etlx.DBInterface")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = vifc.(etlx.DBInterface).Ping()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export db_DBInterface_Query2CSV
func db_DBInterface_Query2CSV(_handle CGoHandle, query *C.char, csv_path *C.char, params CGoHandle) C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "etlx.DBInterface")
	if __err != nil {
		return boolGoToPy(false)
	}
	cret, __err := vifc.(etlx.DBInterface).Query2CSV(C.GoString(query), C.GoString(csv_path), deptrFromHandle_Slice_interface_(params)...)

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return boolGoToPy(false)
	}
	return boolGoToPy(cret)
}

// ---- Structs ---

// --- wrapping struct: etlx.ODBC ---
//
//export db_ODBC_CTor
func db_ODBC_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_db_ODBC(&etlx.ODBC{}))
}

//export db_ODBC_ExecuteQuery
func db_ODBC_ExecuteQuery(_handle CGoHandle, query *C.char, data CGoHandle) C.longlong {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.ODBC")
	if __err != nil {
		return C.longlong(0)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(etlx.ODBC{})).(*etlx.ODBC).ExecuteQuery(C.GoString(query), deptrFromHandle_Slice_interface_(data)...)

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return C.longlong(0)
	}
	return C.longlong(cret)
}

//export db_ODBC_ExecuteQueryRowsAffected
func db_ODBC_ExecuteQueryRowsAffected(_handle CGoHandle, query *C.char, data CGoHandle) C.longlong {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.ODBC")
	if __err != nil {
		return C.longlong(0)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(etlx.ODBC{})).(*etlx.ODBC).ExecuteQueryRowsAffected(C.GoString(query), deptrFromHandle_Slice_interface_(data)...)

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return C.longlong(0)
	}
	return C.longlong(cret)
}

//export db_ODBC_ExecuteNamedQuery
func db_ODBC_ExecuteNamedQuery(_handle CGoHandle, query *C.char, data CGoHandle) C.longlong {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.ODBC")
	if __err != nil {
		return C.longlong(0)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(etlx.ODBC{})).(*etlx.ODBC).ExecuteNamedQuery(C.GoString(query), deptrFromHandle_Map_string_interface_(data))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return C.longlong(0)
	}
	return C.longlong(cret)
}

//export db_ODBC_ExecuteQueryPGInsertWithLastInsertId
func db_ODBC_ExecuteQueryPGInsertWithLastInsertId(_handle CGoHandle, query *C.char, data CGoHandle) C.longlong {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.ODBC")
	if __err != nil {
		return C.longlong(0)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(etlx.ODBC{})).(*etlx.ODBC).ExecuteQueryPGInsertWithLastInsertId(C.GoString(query), deptrFromHandle_Slice_interface_(data)...)

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return C.longlong(0)
	}
	return C.longlong(cret)
}

//export db_ODBC_Query2CSV
func db_ODBC_Query2CSV(_handle CGoHandle, query *C.char, csv_path *C.char, params CGoHandle) C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.ODBC")
	if __err != nil {
		return boolGoToPy(false)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(etlx.ODBC{})).(*etlx.ODBC).Query2CSV(C.GoString(query), C.GoString(csv_path), deptrFromHandle_Slice_interface_(params)...)

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return boolGoToPy(false)
	}
	return boolGoToPy(cret)
}

//export db_ODBC_GetDriverName
func db_ODBC_GetDriverName(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.ODBC")
	if __err != nil {
		return C.CString("")
	}
	return C.CString(gopyh.Embed(vifc, reflect.TypeOf(etlx.ODBC{})).(*etlx.ODBC).GetDriverName())

}

//export db_ODBC_IsEmpty
func db_ODBC_IsEmpty(_handle CGoHandle, value *C.char) C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.ODBC")
	if __err != nil {
		return boolGoToPy(false)
	}
	return boolGoToPy(gopyh.Embed(vifc, reflect.TypeOf(etlx.ODBC{})).(*etlx.ODBC).IsEmpty(C.GoString(value)))

}

// --- wrapping struct: etlx.DB ---
//
//export db_DB_CTor
func db_DB_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_db_DB(&etlx.DB{}))
}

//export db_DB_GetDriverName
func db_DB_GetDriverName(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.DB")
	if __err != nil {
		return C.CString("")
	}
	return C.CString(gopyh.Embed(vifc, reflect.TypeOf(etlx.DB{})).(*etlx.DB).GetDriverName())

}

//export db_DB_ExecuteQuery
func db_DB_ExecuteQuery(_handle CGoHandle, query *C.char, data CGoHandle) C.longlong {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.DB")
	if __err != nil {
		return C.longlong(0)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(etlx.DB{})).(*etlx.DB).ExecuteQuery(C.GoString(query), deptrFromHandle_Slice_interface_(data)...)

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return C.longlong(0)
	}
	return C.longlong(cret)
}

//export db_DB_ExecuteQueryPGInsertWithLastInsertId
func db_DB_ExecuteQueryPGInsertWithLastInsertId(_handle CGoHandle, query *C.char, data CGoHandle) C.longlong {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.DB")
	if __err != nil {
		return C.longlong(0)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(etlx.DB{})).(*etlx.DB).ExecuteQueryPGInsertWithLastInsertId(C.GoString(query), deptrFromHandle_Slice_interface_(data)...)

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return C.longlong(0)
	}
	return C.longlong(cret)
}

//export db_DB_ExecuteQueryRowsAffected
func db_DB_ExecuteQueryRowsAffected(_handle CGoHandle, query *C.char, data CGoHandle) C.longlong {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.DB")
	if __err != nil {
		return C.longlong(0)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(etlx.DB{})).(*etlx.DB).ExecuteQueryRowsAffected(C.GoString(query), deptrFromHandle_Slice_interface_(data)...)

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return C.longlong(0)
	}
	return C.longlong(cret)
}

//export db_DB_ExecuteNamedQuery
func db_DB_ExecuteNamedQuery(_handle CGoHandle, query *C.char, data CGoHandle) C.longlong {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.DB")
	if __err != nil {
		return C.longlong(0)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(etlx.DB{})).(*etlx.DB).ExecuteNamedQuery(C.GoString(query), deptrFromHandle_Map_string_interface_(data))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return C.longlong(0)
	}
	return C.longlong(cret)
}

//export db_DB_IsEmpty
func db_DB_IsEmpty(_handle CGoHandle, value *C.char) C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.DB")
	if __err != nil {
		return boolGoToPy(false)
	}
	return boolGoToPy(gopyh.Embed(vifc, reflect.TypeOf(etlx.DB{})).(*etlx.DB).IsEmpty(C.GoString(value)))

}

//export db_DB_Query2CSV
func db_DB_Query2CSV(_handle CGoHandle, query *C.char, csv_path *C.char, params CGoHandle) C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.DB")
	if __err != nil {
		return boolGoToPy(false)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(etlx.DB{})).(*etlx.DB).Query2CSV(C.GoString(query), C.GoString(csv_path), deptrFromHandle_Slice_interface_(params)...)

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return boolGoToPy(false)
	}
	return boolGoToPy(cret)
}

// --- wrapping struct: etlx.DuckDB ---
//
//export db_DuckDB_CTor
func db_DuckDB_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_db_DuckDB(&etlx.DuckDB{}))
}

//export db_DuckDB_ExecuteQuery
func db_DuckDB_ExecuteQuery(_handle CGoHandle, query *C.char, data CGoHandle) C.longlong {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.DuckDB")
	if __err != nil {
		return C.longlong(0)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(etlx.DuckDB{})).(*etlx.DuckDB).ExecuteQuery(C.GoString(query), deptrFromHandle_Slice_interface_(data)...)

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return C.longlong(0)
	}
	return C.longlong(cret)
}

//export db_DuckDB_ExecuteQueryRowsAffected
func db_DuckDB_ExecuteQueryRowsAffected(_handle CGoHandle, query *C.char, data CGoHandle) C.longlong {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.DuckDB")
	if __err != nil {
		return C.longlong(0)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(etlx.DuckDB{})).(*etlx.DuckDB).ExecuteQueryRowsAffected(C.GoString(query), deptrFromHandle_Slice_interface_(data)...)

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return C.longlong(0)
	}
	return C.longlong(cret)
}

//export db_DuckDB_ExecuteNamedQuery
func db_DuckDB_ExecuteNamedQuery(_handle CGoHandle, query *C.char, data CGoHandle) C.longlong {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.DuckDB")
	if __err != nil {
		return C.longlong(0)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(etlx.DuckDB{})).(*etlx.DuckDB).ExecuteNamedQuery(C.GoString(query), deptrFromHandle_Map_string_interface_(data))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return C.longlong(0)
	}
	return C.longlong(cret)
}

//export db_DuckDB_ExecuteQueryPGInsertWithLastInsertId
func db_DuckDB_ExecuteQueryPGInsertWithLastInsertId(_handle CGoHandle, query *C.char, data CGoHandle) C.longlong {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.DuckDB")
	if __err != nil {
		return C.longlong(0)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(etlx.DuckDB{})).(*etlx.DuckDB).ExecuteQueryPGInsertWithLastInsertId(C.GoString(query), deptrFromHandle_Slice_interface_(data)...)

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return C.longlong(0)
	}
	return C.longlong(cret)
}

//export db_DuckDB_GetDriverName
func db_DuckDB_GetDriverName(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.DuckDB")
	if __err != nil {
		return C.CString("")
	}
	return C.CString(gopyh.Embed(vifc, reflect.TypeOf(etlx.DuckDB{})).(*etlx.DuckDB).GetDriverName())

}

//export db_DuckDB_Query2CSV
func db_DuckDB_Query2CSV(_handle CGoHandle, query *C.char, csv_path *C.char, params CGoHandle) C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.DuckDB")
	if __err != nil {
		return boolGoToPy(false)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(etlx.DuckDB{})).(*etlx.DuckDB).Query2CSV(C.GoString(query), C.GoString(csv_path), deptrFromHandle_Slice_interface_(params)...)

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return boolGoToPy(false)
	}
	return boolGoToPy(cret)
}

//export db_DuckDB_IsEmpty
func db_DuckDB_IsEmpty(_handle CGoHandle, value *C.char) C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.DuckDB")
	if __err != nil {
		return boolGoToPy(false)
	}
	return boolGoToPy(gopyh.Embed(vifc, reflect.TypeOf(etlx.DuckDB{})).(*etlx.DuckDB).IsEmpty(C.GoString(value)))

}

// --- wrapping struct: etlx.ETLX ---
//
//export etlxlib_ETLX_CTor
func etlxlib_ETLX_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_etlxlib_ETLX(&etlx.ETLX{}))
}

//export etlxlib_ETLX_Config_Get
func etlxlib_ETLX_Config_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_etlxlib_ETLX(handle)
	return handleFromPtr_Map_string_any(&op.Config)
}

//export etlxlib_ETLX_Config_Set
func etlxlib_ETLX_Config_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_etlxlib_ETLX(handle)
	op.Config = deptrFromHandle_Map_string_any(val)
}

//export etlxlib_ETLX_ExecuteQueryWithRowsAffected
func etlxlib_ETLX_ExecuteQueryWithRowsAffected(_handle CGoHandle, conn CGoHandle, sqlData CGoHandle, item CGoHandle, fname *C.char, step *C.char, dateRef CGoHandle) C.longlong {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.ETLX")
	if __err != nil {
		return C.longlong(0)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(etlx.ETLX{})).(*etlx.ETLX).ExecuteQueryWithRowsAffected(ptrFromHandle_db_DBInterface(conn), ptrFromHandle_any(sqlData), deptrFromHandle_Map_string_any(item), C.GoString(fname), C.GoString(step), deptrFromHandle_Slice_time_Time(dateRef))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return C.longlong(0)
	}
	return C.longlong(cret)
}

//export etlxlib_ETLX_RunDATA_QUALITY
func etlxlib_ETLX_RunDATA_QUALITY(_handle CGoHandle, dateRef CGoHandle, conf CGoHandle, extraConf CGoHandle, keys CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.ETLX")
	if __err != nil {
		return handleFromPtr_Slice_Map_string_any(nil)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(etlx.ETLX{})).(*etlx.ETLX).RunDATA_QUALITY(deptrFromHandle_Slice_time_Time(dateRef), deptrFromHandle_Map_string_any(conf), deptrFromHandle_Map_string_any(extraConf), deptrFromHandle_Slice_string(keys)...)

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Slice_Map_string_any(nil)
	}
	return handleFromPtr_Slice_Map_string_any(&cret)
}

//export etlxlib_ETLX_ConfigFromFile
func etlxlib_ETLX_ConfigFromFile(_handle CGoHandle, filePath *C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.ETLX")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(etlx.ETLX{})).(*etlx.ETLX).ConfigFromFile(C.GoString(filePath))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export etlxlib_ETLX_ConfigFromIpynbJSON
func etlxlib_ETLX_ConfigFromIpynbJSON(_handle CGoHandle, ipynbJSON *C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.ETLX")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(etlx.ETLX{})).(*etlx.ETLX).ConfigFromIpynbJSON(C.GoString(ipynbJSON))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export etlxlib_ETLX_ConfigFromMDText
func etlxlib_ETLX_ConfigFromMDText(_handle CGoHandle, mdText *C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.ETLX")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(etlx.ETLX{})).(*etlx.ETLX).ConfigFromMDText(C.GoString(mdText))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export etlxlib_ETLX_ParseMarkdownToConfig_
func etlxlib_ETLX_ParseMarkdownToConfig_(_handle CGoHandle, reader CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.ETLX")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(etlx.ETLX{})).(*etlx.ETLX).ParseMarkdownToConfig_(ptrFromHandle_text_Reader(reader))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export etlxlib_ETLX_TracebackHeaders
func etlxlib_ETLX_TracebackHeaders(_handle CGoHandle, node CGoHandle, source CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.ETLX")
	if __err != nil {
		return handleFromPtr_Slice_string(nil)
	}
	cret := gopyh.Embed(vifc, reflect.TypeOf(etlx.ETLX{})).(*etlx.ETLX).TracebackHeaders(ptrFromHandle_ast_Node(node), deptrFromHandle_Slice_byte(source))

	return handleFromPtr_Slice_string(&cret)
}

//export etlxlib_ETLX_ParseMarkdownToConfig
func etlxlib_ETLX_ParseMarkdownToConfig(_handle CGoHandle, reader CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.ETLX")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(etlx.ETLX{})).(*etlx.ETLX).ParseMarkdownToConfig(ptrFromHandle_text_Reader(reader))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export etlxlib_ETLX_PrintConfigAsJSON
func etlxlib_ETLX_PrintConfigAsJSON(_handle CGoHandle, config CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.ETLX")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(etlx.ETLX{})).(*etlx.ETLX).PrintConfigAsJSON(deptrFromHandle_Map_string_any(config))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(etlx.ETLX{})).(*etlx.ETLX).PrintConfigAsJSON(deptrFromHandle_Map_string_any(config))
	}
}

//export etlxlib_ETLX_Walk
func etlxlib_ETLX_Walk(_handle CGoHandle, data CGoHandle, path *C.char, fn *C.PyObject, goRun C.char) {
	_fun_arg := fn
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.ETLX")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(etlx.ETLX{})).(*etlx.ETLX).Walk(deptrFromHandle_Map_string_any(data), C.GoString(path), func(keyPath string, value any) {
			if C.PyCallable_Check(_fun_arg) == 0 {
				return
			}
			_gstate := C.PyGILState_Ensure()
			_fcargs := C.PyTuple_New(2)
			C.PyTuple_SetItem(_fcargs, 0, C.gopy_build_string(C.CString(keyPath)))
			C.PyTuple_SetItem(_fcargs, 1, C.gopy_build_int64(C.int64_t(handleFromPtr_any(value))))
			C.PyObject_CallObject(_fun_arg, _fcargs)
			C.gopy_decref(_fcargs)
			C.gopy_err_handle()
			C.PyGILState_Release(_gstate)
		})
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(etlx.ETLX{})).(*etlx.ETLX).Walk(deptrFromHandle_Map_string_any(data), C.GoString(path), func(keyPath string, value any) {
			if C.PyCallable_Check(_fun_arg) == 0 {
				return
			}
			_gstate := C.PyGILState_Ensure()
			_fcargs := C.PyTuple_New(2)
			C.PyTuple_SetItem(_fcargs, 0, C.gopy_build_string(C.CString(keyPath)))
			C.PyTuple_SetItem(_fcargs, 1, C.gopy_build_int64(C.int64_t(handleFromPtr_any(value))))
			C.PyObject_CallObject(_fun_arg, _fcargs)
			C.gopy_decref(_fcargs)
			C.gopy_err_handle()
			C.PyGILState_Release(_gstate)
		})
	}
}

//export etlxlib_ETLX_GetRefFromString
func etlxlib_ETLX_GetRefFromString(_handle CGoHandle, file *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.ETLX")
	if __err != nil {
		return handleFromPtr_time_Time(nil)
	}
	cret := gopyh.Embed(vifc, reflect.TypeOf(etlx.ETLX{})).(*etlx.ETLX).GetRefFromString(C.GoString(file))

	return handleFromPtr_time_Time(&cret)
}

//export etlxlib_ETLX_ReplaceFileTablePlaceholder
func etlxlib_ETLX_ReplaceFileTablePlaceholder(_handle CGoHandle, key *C.char, sql *C.char, file_table *C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.ETLX")
	if __err != nil {
		return C.CString("")
	}
	return C.CString(gopyh.Embed(vifc, reflect.TypeOf(etlx.ETLX{})).(*etlx.ETLX).ReplaceFileTablePlaceholder(C.GoString(key), C.GoString(sql), C.GoString(file_table)))

}

//export etlxlib_ETLX_GetGODateFormat
func etlxlib_ETLX_GetGODateFormat(_handle CGoHandle, format *C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.ETLX")
	if __err != nil {
		return C.CString("")
	}
	return C.CString(gopyh.Embed(vifc, reflect.TypeOf(etlx.ETLX{})).(*etlx.ETLX).GetGODateFormat(C.GoString(format)))

}

//export etlxlib_ETLX_ReplaceQueryStringDate
func etlxlib_ETLX_ReplaceQueryStringDate(_handle CGoHandle, query *C.char, dateRef *C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.ETLX")
	if __err != nil {
		return C.CString("")
	}
	return C.CString(gopyh.Embed(vifc, reflect.TypeOf(etlx.ETLX{})).(*etlx.ETLX).ReplaceQueryStringDate(C.GoString(query), C.GoString(dateRef)))

}

//export etlxlib_ETLX_ReplaceEnvVariable
func etlxlib_ETLX_ReplaceEnvVariable(_handle CGoHandle, input *C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.ETLX")
	if __err != nil {
		return C.CString("")
	}
	return C.CString(gopyh.Embed(vifc, reflect.TypeOf(etlx.ETLX{})).(*etlx.ETLX).ReplaceEnvVariable(C.GoString(input)))

}

//export etlxlib_ETLX_TempFIle
func etlxlib_ETLX_TempFIle(_handle CGoHandle, content *C.char, name *C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.ETLX")
	if __err != nil {
		return C.CString("")
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(etlx.ETLX{})).(*etlx.ETLX).TempFIle(C.GoString(content), C.GoString(name))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return C.CString("")
	}
	return C.CString(cret)
}

//export etlxlib_ETLX_ConvertIPYNBToMarkdown
func etlxlib_ETLX_ConvertIPYNBToMarkdown(_handle CGoHandle, ipynbContent CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.ETLX")
	if __err != nil {
		return C.CString("")
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(etlx.ETLX{})).(*etlx.ETLX).ConvertIPYNBToMarkdown(deptrFromHandle_Slice_byte(ipynbContent))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return C.CString("")
	}
	return C.CString(cret)
}

//export etlxlib_ETLX_LoadREQUIRES
func etlxlib_ETLX_LoadREQUIRES(_handle CGoHandle, conf CGoHandle, keys CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.ETLX")
	if __err != nil {
		return handleFromPtr_Slice_Map_string_any(nil)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(etlx.ETLX{})).(*etlx.ETLX).LoadREQUIRES(deptrFromHandle_Map_string_any(conf), deptrFromHandle_Slice_string(keys)...)

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Slice_Map_string_any(nil)
	}
	return handleFromPtr_Slice_Map_string_any(&cret)
}

//export etlxlib_ETLX_GetDB
func etlxlib_ETLX_GetDB(_handle CGoHandle, conn *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.ETLX")
	if __err != nil {
		return handleFromPtr_db_DBInterface(nil)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(etlx.ETLX{})).(*etlx.ETLX).GetDB(C.GoString(conn))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_db_DBInterface(nil)
	}
	return handleFromPtr_db_DBInterface(cret)
}

//export etlxlib_ETLX_SetQueryPlaceholders
func etlxlib_ETLX_SetQueryPlaceholders(_handle CGoHandle, query *C.char, table *C.char, path *C.char, dateRef CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.ETLX")
	if __err != nil {
		return C.CString("")
	}
	return C.CString(gopyh.Embed(vifc, reflect.TypeOf(etlx.ETLX{})).(*etlx.ETLX).SetQueryPlaceholders(C.GoString(query), C.GoString(table), C.GoString(path), deptrFromHandle_Slice_time_Time(dateRef)))

}

//export etlxlib_ETLX_ReplacePlaceholders
func etlxlib_ETLX_ReplacePlaceholders(_handle CGoHandle, sql *C.char, item CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.ETLX")
	if __err != nil {
		return C.CString("")
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(etlx.ETLX{})).(*etlx.ETLX).ReplacePlaceholders(C.GoString(sql), deptrFromHandle_Map_string_any(item))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return C.CString("")
	}
	return C.CString(cret)
}

//export etlxlib_ETLX_ExecuteQuery
func etlxlib_ETLX_ExecuteQuery(_handle CGoHandle, conn CGoHandle, sqlData CGoHandle, item CGoHandle, fname *C.char, step *C.char, dateRef CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.ETLX")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(etlx.ETLX{})).(*etlx.ETLX).ExecuteQuery(ptrFromHandle_db_DBInterface(conn), ptrFromHandle_any(sqlData), deptrFromHandle_Map_string_any(item), C.GoString(fname), C.GoString(step), deptrFromHandle_Slice_time_Time(dateRef))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export etlxlib_ETLX_RunETL
func etlxlib_ETLX_RunETL(_handle CGoHandle, dateRef CGoHandle, conf CGoHandle, extraConf CGoHandle, keys CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.ETLX")
	if __err != nil {
		return handleFromPtr_Slice_Map_string_any(nil)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(etlx.ETLX{})).(*etlx.ETLX).RunETL(deptrFromHandle_Slice_time_Time(dateRef), deptrFromHandle_Map_string_any(conf), deptrFromHandle_Map_string_any(extraConf), deptrFromHandle_Slice_string(keys)...)

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Slice_Map_string_any(nil)
	}
	return handleFromPtr_Slice_Map_string_any(&cret)
}

//export etlxlib_ETLX_RunEXPORTS
func etlxlib_ETLX_RunEXPORTS(_handle CGoHandle, dateRef CGoHandle, conf CGoHandle, extraConf CGoHandle, keys CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.ETLX")
	if __err != nil {
		return handleFromPtr_Slice_Map_string_any(nil)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(etlx.ETLX{})).(*etlx.ETLX).RunEXPORTS(deptrFromHandle_Slice_time_Time(dateRef), deptrFromHandle_Map_string_any(conf), deptrFromHandle_Map_string_any(extraConf), deptrFromHandle_Slice_string(keys)...)

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Slice_Map_string_any(nil)
	}
	return handleFromPtr_Slice_Map_string_any(&cret)
}

//export etlxlib_ETLX_RunMULTI_QUERIES
func etlxlib_ETLX_RunMULTI_QUERIES(_handle CGoHandle, dateRef CGoHandle, conf CGoHandle, extraConf CGoHandle, keys CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*etlx.ETLX")
	if __err != nil {
		return handleFromPtr_Slice_Map_string_any(nil)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(etlx.ETLX{})).(*etlx.ETLX).RunMULTI_QUERIES(deptrFromHandle_Slice_time_Time(dateRef), deptrFromHandle_Map_string_any(conf), deptrFromHandle_Map_string_any(extraConf), deptrFromHandle_Slice_string(keys)...)

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Slice_Map_string_any(nil)
	}
	return handleFromPtr_Slice_Map_string_any(&cret)
}

// ---- Slices ---

// ---- Maps ---

// ---- Constructors ---

// ---- Functions ---

//export etlx_LoadDotEnv
func etlx_LoadDotEnv(goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	if boolPyToGo(goRun) {
		go etlx.LoadDotEnv()
	} else {
		etlx.LoadDotEnv()
	}
}
